invrs <<- NULL
}
getf <- function() x
Invrsset <- function(invrt) invrs <<- invrt
Invrsget <- function() invrs
list(setf = setf,
getf = getf,
Invrsset = Invrsset,
Invrsget = Invrsget)
}
## This function computes the inverse of the special "matrix" returned by makeCacheMatrix above.
## If the inverse has already been calculated (and the matrix has not changed),
## then the cachesolve should retrieve the inverse from the cache.
cacheSolve <- function(x, ...) {
invrs <- x$Invrsget()
if (!is.null(invrs))
{
message("getting cached data")
return(inv)
}
matrx <- x$getf()
invrs <- solve(matrx, ...)
x$Invrsset(invrs)
invrs
}
## This function creates a special "matrix" object that can cache its inverse.
makeCacheMatrix <- function(x = matrix()) {
invrs <- NULL
setf <- function(y) {
x <<- y
invrs <<- NULL
}
getf <- function() x
Invrsset <- function(invrt) invrs <<- invrt
Invrsget <- function() invrs
list(setf = setf,
getf = getf,
Invrsset = Invrsset,
Invrsget = Invrsget)
}
## This function computes the inverse of the special "matrix" returned by makeCacheMatrix above.
## If the inverse has already been calculated (and the matrix has not changed),
## then the cachesolve should retrieve the inverse from the cache.
cacheSolve <- function(x, ...) {
invrs <- x$Invrsget()
if (!is.null(invrs))
{
message("getting cached data")
return(invrs)
}
matrx <- x$getf()
invrs <- solve(matrx, ...)
x$Invrsset(invrs)
invrs
}
my_matrix <- makeCacheMatrix(matrix(1:4, 2, 2))
my_matrix$get()
my_matrix$getInverse()
my_matrix$Invrsget()
cacheSolve(my_matrix)
cacheSolve(my_matrix)
my_matrix$Invrsget()
my_matrix$set(matrix(c(2, 2, 1, 4), 2, 2))
my_matrix$get()
my_matrix$Invrsget()
cacheSolve(my_matrix)
cacheSolve(my_matrix)
library(swirl)
install_from_swirl("Getting and Cleaning Data")
swirl()
?read.csv
mydf<-read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
cran
?select
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time)
-5:20
(5:20)
-(5:20)
select(cran, -(X:size))
filter(cran, package == "swirl")
filter(cran,
| r_version == "3.1.1", country == "US")
filter(cran,r_version == "3.1.1", country == "US")
?Comparison
filter(cran,r_version == "3.0.2", country == "IN")
filter(cran,r_version <= "3.0.2", country == "IN")
filter(cran, country == "US" | country == "IN")
filter(cran, size > 100500 & r_os == "linux-gnu")
filter(cran, size > 100500 , r_os == "linux-gnu")
is.na(c(3, 5, NA, 10))
!is.na(c(3, 5, NA, 10))
filter(cran, !is.na(r_version))
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version),ip_id)
cran3 <- select(cran,(ip_id, package, size))
cran3 <- select(cran,ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran3, correct_size = size * 1000)
mutate(cran3, correct_size = size + 1000)
summarize(cran, avg_bytes = mean(size))
library(dplyr)
tbl_df(mydf)
cran <- tbl_df(mydf)
rm("mydf")
cran
?group_by()
?group_by
by_package<-group_by(cran)
by_package<-group_by(cran, package)
by_package
summarize(cran, mean(size),by_package)
summarize(cran,mean(size),by_package)
summarize(cran,mean(size,by_package))
summarize(cran,mean(size,by_package))
by_package
summarize(by_package,mean(size))
hjk
reset()
submit()
tbl
pack_sum
quantile(pack_sum$count, probs = 0.99)
filter(pack_sum, count > 679)
top_counts<-filter(pack_sum, count > 679)
top_counts
View(top_counts)
top_counts_sorted<-arrange(top_counts, desc(count))
View(top_counts_sorted)
quantile(pack_sum$unique, probs = 0.99)
top_unique <- filter(pack_sum, unique > 465)
View(top_unique)
top_unique_sorted <- arrange(top_unique, desc(unique))
view(top_unique_sorted)
View(top_unique_sorted)
submit()
submit()
submit()
View(result3)
submit()
submit()
submit()
submit()
submit()
Sys.getlocale("LC_TIME")
library(lubridate)
help(package = lubridate)
today()
this_day <- today()
this_day
year(this_day)
wday(this_day)
wday(this_day,label = TRUE)
now()
this_moment <- now()
this_moment
minute(this_moment)
ymd("1989-05-17")
my_date <- ymd("1989-05-17")
my_date
class(my_date)
ymd("1989-May-17")
ymd("1989 May 17")
mdy("March 12, 1975")
dmy(25081985)
ymd("192012")
ymd("19200102")
ymd("1920/1/2")
dt1
ymd_hms(dt1)
hms("03:22:14")
dt2
ymd(dt2)
update(this_moment, hours = 8, minutes = 34, seconds = 55)
this_moment
update(this_moment, hours = 8, minutes = 34, seconds = 55)
update(this_moment, hours = 10, minutes = 16, seconds = 0)
this_moment<-update(this_moment, hours = 10, minutes = 16, seconds = 0)
yjk
jkhkh
submit
this_moment
nyc <- now()
nyc <- now("America/New_York")
nyc
depart<-nyc + days(2)
depart
depart<-update(depart,hours = 17, minutes = 34)
depart
arrive<-update(depart,hours = hours + 15, minutes = minutes + 50)
arrive<-update(depart,hours = 15, minutes = 50)
arrive <- depart + hours(15) + minutes(50)
?with_tz
with_tz(arrive, tzone ="Asia/Hong_Kong")
with_tz(arrive, "Asia/Hong_Kong")
arrive<-with_tz(arrive, "Asia/Hong_Kong")
with_tz(arrive, "Asia/Hong_Kong")
arrive
last_time<-mdy("June 17, 2008",tz="Singapore")
last_time
?new_interval
how_long<-new_interval(last_time,arrive)
as.period(how_long)
stopwatch()
library("dplyr")
library("knitr")
library("reshape2")
library("ggplot2")
opts_chunk$set(echo = TRUE)
setwd("C:\Users\Administrator\Desktop\RepData_PeerAssessment1")
data_row <- read.csv('activity.csv')
data <- data_row[ with (data_row, { !(is.na(steps)) } ), ]
head(data,20)
install.packages("knitr")
library("dplyr")
library("knitr")
library("reshape2")
library("ggplot2")
opts_chunk$set(echo = TRUE)
setwd("C:\Users\Administrator\Desktop\RepData_PeerAssessment1")
data_row <- read.csv('activity.csv')
data <- data_row[ with (data_row, { !(is.na(steps)) } ), ]
head(data,20)
setwd("C:\Users\Administrator\Desktop\RepData_PeerAssessment1")
setwd("C:/Users/Administrator/Desktop/RepData_PeerAssessment1")
library("dplyr")
library("knitr")
library("reshape2")
library("ggplot2")
opts_chunk$set(echo = TRUE)
setwd("C:/Users/Administrator/Desktop/RepData_PeerAssessment1")
data_row <- read.csv('activity.csv')
data <- data_row[ with (data_row, { !(is.na(steps)) } ), ]
head(data,20)
library("dplyr")
library("knitr")
library("reshape2")
library("ggplot2")
opts_chunk$set(echo = TRUE)
setwd("C:/Users/Administrator/Desktop/RepData_PeerAssessment1")
RawData <- read.csv('activity.csv')
CompData <- RawData[ with (RawData, { !(is.na(steps)) } ), ]
TransfData <- transform(CompData, date=as.Date(date, format="%Y-%m-%d"))
head(TransfData,20)
library("dplyr")
library("knitr")
library("reshape2")
library("ggplot2")
opts_chunk$set(echo = TRUE)
setwd("C:/Users/Administrator/Desktop/RepData_PeerAssessment1")
RawData <- read.csv('activity.csv')
CompData <- RawData[ with (RawData, { !(is.na(steps)) } ), ]
TransfData <- transform(CompData, date=as.Date(date, format="%d-%m-%y"))
head(TransfData,20)
library("dplyr")
library("knitr")
library("reshape2")
library("ggplot2")
opts_chunk$set(echo = TRUE)
setwd("C:/Users/Administrator/Desktop/RepData_PeerAssessment1")
RawData <- read.csv('activity.csv')
TransfData <- RawData[ with (RawData, { !(is.na(steps)) } ), ]
# TransfData <- transform(CompData, date=as.Date(date, format="%Y-%m-%d"))
head(TransfData,20)
library("dplyr")
library("knitr")
library("reshape2")
library("ggplot2")
opts_chunk$set(echo = TRUE)
setwd("C:/Users/Administrator/Desktop/RepData_PeerAssessment1")
RawData <- read.csv('activity.csv')
TransfData <- RawData[ with (RawData, { !(is.na(steps)) } ), ]
# TransfData <- transform(CompData, date=as.Date(date, format="%Y-%m-%d"))
head(TransfData,20)
library("dplyr")
library("knitr")
library("reshape2")
library("ggplot2")
opts_chunk$set(echo = TRUE)
setwd("C:/Users/Administrator/Desktop/RepData_PeerAssessment1")
RawData <- read.csv('activity.csv')
TransfData <- RawData[ with (RawData, { !(is.na(steps)) } ), ]
# TransfData <- transform(CompData, date=as.Date(date, format="%Y-%m-%d"))
head(TransfData,2000)
library("dplyr")
library("knitr")
library("reshape2")
library("ggplot2")
opts_chunk$set(echo = TRUE)
setwd("C:/Users/Administrator/Desktop/RepData_PeerAssessment1")
RawData <- read.csv('activity.csv')
TransfData <- RawData[ with (RawData, { !(is.na(steps)) } ), ]
# TransfData <- transform(CompData, date=as.Date(date, format="%Y-%m-%d"))
head(TransfData,10000)
library("dplyr")
library("knitr")
library("reshape2")
library("ggplot2")
opts_chunk$set(echo = TRUE)
setwd("C:/Users/Administrator/Desktop/RepData_PeerAssessment1")
RawData <- read.csv('activity.csv')
TransfData <- RawData[ with (RawData, { !(is.na(steps)) } ), ]
GroupedPerDay <- group_by(TransfData, date)
StepsPerDay <- summarise(GroupedPerDay, total = sum(steps))
StepsPerDay
library("dplyr")
library("knitr")
library("reshape2")
library("ggplot2")
opts_chunk$set(echo = TRUE)
setwd("C:/Users/Administrator/Desktop/RepData_PeerAssessment1")
RawData <- read.csv('activity.csv')
TransfData <- RawData[ with (RawData, { !(is.na(steps)) } ), ]
GroupedPerDay <- group_by(TransfData, date)
StepsPerDay <- summarise(GroupedPerDay, total = sum(steps))
hist(StepsPerDay$total, main="Total Number Of Steps Grouped Per Day", xlab="Total Steps per Day"col="blue")
library("dplyr")
library("knitr")
library("reshape2")
library("ggplot2")
opts_chunk$set(echo = TRUE)
setwd("C:/Users/Administrator/Desktop/RepData_PeerAssessment1")
RawData <- read.csv('activity.csv')
TransfData <- RawData[ with (RawData, { !(is.na(steps)) } ), ]
GroupedPerDay <- group_by(TransfData, date)
StepsPerDay <- summarise(GroupedPerDay, total = sum(steps))
hist(StepsPerDay$total, main="Total Number Of Steps Grouped Per Day", xlab="Total Steps per Day", col="blue")
MeanValue <- (mean(StepsPerDay$steps))
MedianValue <- factor(median(StepsPerDay$steps))
print(MeanValue)
library("dplyr")
library("knitr")
library("reshape2")
library("ggplot2")
opts_chunk$set(echo = TRUE)
# Loading & Transforming data
setwd("C:/Users/Administrator/Desktop/RepData_PeerAssessment1")
RawData <- read.csv('activity.csv')
TransfData <- RawData[ with (RawData, { !(is.na(steps)) } ), ]
# Section 1: What is mean total number of steps taken per day?
# Task 1: Total number of steps taken per day
GroupedPerDay <- group_by(TransfData, date)
StepsPerDay <- summarise(GroupedPerDay, total = sum(steps))
# Task 2: Histogram of the total number of steps taken each day
hist(StepsPerDay$total, main="Total Number Of Steps Grouped Per Day", xlab="Total Steps taken each Day", col="blue")
# Task 3: Mean and median of the total number of steps taken per day
MeanValue <- (mean(StepsPerDay$steps))
MedianValue <- factor(median(StepsPerDay$steps))
print(MeanValue)
library("dplyr")
library("knitr")
library("reshape2")
library("ggplot2")
opts_chunk$set(echo = TRUE)
# Loading & Transforming data
setwd("C:/Users/Administrator/Desktop/RepData_PeerAssessment1")
RawData <- read.csv('activity.csv')
TransfData <- RawData[ with (RawData, { !(is.na(steps)) } ), ]
# Section 1: What is mean total number of steps taken per day?
# Task 1: Total number of steps taken per day
GroupedPerDay <- group_by(TransfData, date)
StepsPerDay <- summarise(GroupedPerDay, total = sum(steps))
# Task 2: Histogram of the total number of steps taken each day
hist(StepsPerDay$total, main="Total Number Of Steps Grouped Per Day", xlab="Total Steps taken each Day", col="blue")
# Task 3: Mean and median of the total number of steps taken per day
MeanValue <- round(mean(StepsPerDay$steps))
MedianValue <- factor(median(StepsPerDay$steps))
print(MeanValue)
library("dplyr")
library("knitr")
library("reshape2")
library("ggplot2")
opts_chunk$set(echo = TRUE)
# Loading & Transforming data
setwd("C:/Users/Administrator/Desktop/RepData_PeerAssessment1")
RawData <- read.csv('activity.csv')
TransfData <- RawData[ with (RawData, { !(is.na(steps)) } ), ]
# Section 1: What is mean total number of steps taken per day?
# Task 1: Total number of steps taken per day
GroupedPerDay <- group_by(TransfData, date)
StepsPerDay <- summarise(GroupedPerDay, total = sum(steps))
# Task 2: Histogram of the total number of steps taken each day
hist(StepsPerDay$total, main="Total Number Of Steps Grouped Per Day", xlab="Total Steps taken each Day", col="blue")
# Task 3: Mean and median of the total number of steps taken per day
summary(StepsPerDay)
library("dplyr")
library("knitr")
library("reshape2")
library("ggplot2")
opts_chunk$set(echo = TRUE)
# Loading & Transforming data
setwd("C:/Users/Administrator/Desktop/RepData_PeerAssessment1")
RawData <- read.csv('activity.csv')
TransfData <- RawData[ with (RawData, { !(is.na(steps)) } ), ]
# Section 1: What is mean total number of steps taken per day?
# Task 1: Total number of steps taken per day
GroupedPerDay <- group_by(TransfData, date)
StepsPerDay <- summarise(GroupedPerDay, total = sum(steps))
# Task 2: Histogram of the total number of steps taken each day
hist(StepsPerDay$total, main="Total Number Of Steps Grouped Per Day", xlab="Total Steps taken each Day", col="blue")
# Task 3: Mean and median of the total number of steps taken per day
MeanValue <- mean(StepsPerDay)
MedianValue <- median(StepsPerDay$steps)
print(MeanValue)
print(MedianValue)
library("dplyr")
library("knitr")
library("reshape2")
library("ggplot2")
opts_chunk$set(echo = TRUE)
# Loading & Transforming data
setwd("C:/Users/Administrator/Desktop/RepData_PeerAssessment1")
RawData <- read.csv('activity.csv')
TransfData <- RawData[ with (RawData, { !(is.na(steps)) } ), ]
# Section 1: What is mean total number of steps taken per day?
# Task 1: Total number of steps taken per day
GroupedPerDay <- group_by(TransfData, date)
StepsPerDay <- summarise(GroupedPerDay, total = sum(steps))
# Task 2: Histogram of the total number of steps taken each day
hist(StepsPerDay$total, main="Total Number Of Steps Grouped Per Day", xlab="Total Steps taken each Day", col="blue")
# Task 3: Mean and median of the total number of steps taken per day
MeanValue <- mean(StepsPerDay)
MedianValue <- median(StepsPerDay)
print(MeanValue)
print(MedianValue)
MeanValue <- mean(StepsPerDay$total)
MedianValue <- median(StepsPerDay$total)
print(MeanValue)
print(MedianValue)
MeanValue <- round(mean(StepsPerDay$total))
MedianValue <- median(StepsPerDay$total)
print(MeanValue)
print(MedianValue)
AvgStepsPerInterval <- aggregate(steps ~ interval, TransfData, mean)
plot(AvgStepsPerInterval$interval, AvgStepsPerInterval$steps, type='l', col=1, main="Average Number Of Taken Steps Per Interval", xlab="Intervals", ylab="Average Steps")
AvgStepsPerInterval <- aggregate(steps ~ interval, TransfData, mean)
plot(AvgStepsPerInterval$interval, AvgStepsPerInterval$steps, type='2', col=1, main="Average Number Of Taken Steps Per Interval", xlab="Intervals", ylab="Average Steps")
AvgStepsPerInterval <- aggregate(steps ~ interval, TransfData, mean)
plot(AvgStepsPerInterval$interval, AvgStepsPerInterval$steps, type='3', col=1, main="Average Number Of Taken Steps Per Interval", xlab="Intervals", ylab="Average Steps")
AvgStepsPerInterval <- aggregate(steps ~ interval, TransfData, mean)
plot(AvgStepsPerInterval$interval, AvgStepsPerInterval$steps, type='1', col=1, main="Average Number Of Taken Steps Per Interval", xlab="Intervals", ylab="Average Steps")
AvgStepsPerInterval <- aggregate(steps ~ interval, TransfData, mean)
plot(AvgStepsPerInterval$interval, AvgStepsPerInterval$steps, type='1', col=1, main="Average Number Of Taken Steps Per Interval", xlab="Intervals", ylab="Average Steps")
library("dplyr")
library("knitr")
library("reshape2")
library("ggplot2")
opts_chunk$set(echo = TRUE)
# Loading & Transforming data
setwd("C:/Users/Administrator/Desktop/RepData_PeerAssessment1")
RawData <- read.csv('activity.csv')
TransfData <- RawData[ with (RawData, { !(is.na(steps)) } ), ]
# Section 1: What is mean total number of steps taken per day?
# Task 1: Total number of steps taken per day
GroupedPerDay <- group_by(TransfData, date)
StepsPerDay <- summarise(GroupedPerDay, total = sum(steps))
# Task 2: Histogram of the total number of steps taken each day
hist(StepsPerDay$total, main="Total Number Of Steps Grouped Per Day", xlab="Total Steps taken each Day", col="blue")
# Task 3: Mean and median of the total number of steps taken per day
MeanValue <- round(mean(StepsPerDay$total))
MedianValue <- median(StepsPerDay$total)
print(MeanValue)
print(MedianValue)
# Section 2: What is the average daily activity pattern?
# Task 1: time series plot
AvgStepsPerInterval <- aggregate(steps ~ interval, TransfData, mean)
plot(AvgStepsPerInterval$interval, AvgStepsPerInterval$steps, type='1', col=1, main="Average Number Of Taken Steps Per Interval", xlab="Intervals", ylab="Average Steps")
# Section 2: What is the average daily activity pattern?
# Task 1: time series plot
AvgStepsPerInterval <- aggregate(steps ~ interval, TransfData, mean)
plot(AvgStepsPerInterval$interval, AvgStepsPerInterval$steps, type='1', col=1, main="Average Number Of Taken Steps Per Interval", xlab="Intervals", ylab="Average Steps")
# Section 2: What is the average daily activity pattern?
# Task 1: time series plot
AvgStepsPerInterval <- aggregate(steps ~ interval, TransfData, mean)
plot(AvgStepsPerInterval$interval, AvgStepsPerInterval$steps, type='1', col=1, main="Average Number Of Taken Steps Per Interval", xlab="Intervals", ylab="Average Steps")
library("dplyr")
library("knitr")
opts_chunk$set(echo = TRUE)
# Loading & Transforming data
setwd("C:/Users/Administrator/Desktop/RepData_PeerAssessment1")
RawData <- read.csv('activity.csv')
TransfData <- RawData[ with (RawData, { !(is.na(steps)) } ), ]
# Section 1: What is mean total number of steps taken per day?
# Task 1: Total number of steps taken per day
GroupedPerDay <- group_by(TransfData, date)
StepsPerDay <- summarise(GroupedPerDay, total = sum(steps))
# Task 2: Histogram of the total number of steps taken each day
hist(StepsPerDay$total, main="Total Number Of Steps Grouped Per Day", xlab="Total Steps taken each Day", col="blue")
# Task 3: Mean and median of the total number of steps taken per day
MeanValue <- round(mean(StepsPerDay$total))
MedianValue <- median(StepsPerDay$total)
print(MeanValue)
print(MedianValue)
# Section 2: What is the average daily activity pattern?
# Task 1: time series plot
AvgStepsPerInterval <- aggregate(steps ~ interval, TransfData, mean)
plot(AvgStepsPerInterval$interval, AvgStepsPerInterval$steps, type='1', col=1, main="Average Number Of Taken Steps Per Interval", xlab="Intervals", ylab="Average Steps")
